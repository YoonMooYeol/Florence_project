services:
  web:
    build: .
    # EB ECR 리포지토리를 사용한다면 build 후 push된 이미지를 pull 할 수도 있지만,
    # 여기서는 build: . 형태로 Dockerfile 사용
    image: 954976297775.dkr.ecr.ap-northeast-2.amazonaws.com/simple-docker-service-0ace5acaf2a1
    # command는 entrypoint.sh에서 SERVICE_TYPE=web일 때 gunicorn을 실행하므로 생략
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "0"
      DATABASE: "postgres"
      DB_ENGINE: "django.db.backends.postgresql"
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: "db"
      DB_PORT: "5432"
      SERVICE_TYPE: "web"
    depends_on:
      - db
      - redis
    restart: always

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: always

  redis:
    image: redis:7-alpine
    restart: always

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      # web 컨테이너와 동일 경로로 맞추고 싶다면 /app/static /app/media 로 바꿔도 OK
      - static_volume:/home/app/static
      - media_volume:/home/app/media
    depends_on:
      - web
    restart: always

  celery-worker:
    build: .
    image: 954976297775.dkr.ecr.ap-northeast-2.amazonaws.com/simple-docker-service-0ace5acaf2a1
    # command는 entrypoint.sh에서 SERVICE_TYPE=celery-worker일 때 지정
    volumes:
      - .:/app
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "0"
      DATABASE: "postgres"
      DB_ENGINE: "django.db.backends.postgresql"
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: "db"
      DB_PORT: "5432"
      SERVICE_TYPE: "celery-worker"
    depends_on:
      - db
      - redis
    restart: always

  celery-beat:
    build: .
    image: 954976297775.dkr.ecr.ap-northeast-2.amazonaws.com/simple-docker-service-0ace5acaf2a1
    # command는 entrypoint.sh에서 SERVICE_TYPE=celery-beat일 때 지정
    volumes:
      - .:/app
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "0"
      DATABASE: "postgres"
      DB_ENGINE: "django.db.backends.postgresql"
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: "db"
      DB_PORT: "5432"
      SERVICE_TYPE: "celery-beat"
    depends_on:
      - db
      - redis
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:
