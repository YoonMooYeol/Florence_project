Skip to main content
chat_spark
Create Prompt
mic
Stream Realtime
bolt
Starter Apps
tune
Tune a Model
home_storage
Library
chat_bubble
GitHub Actions Elastic Beanstalk CI/CD Setup
chat_bubble
Vite API Base URL 설정 오류 해결
chat_bubble
Docker Compose Project Setup
book_2
Prompt Gallery
quick_reference_all
API documentation
forum
Developer forum
view_agenda
Changelog NEW
This experimental model is for feedback and testing only. No production use.
settings
Settings
GitHub Actions Elastic Beanstalk CI/CD Setup
drivecheck
윤무열
Optional tone and style instructions for the model
스크린샷 2025-03-20 오후 9.30.52.png
깃허브액션을 이용해서 엘라스틱빈스톡 ci/cd하려 하는데 여기다 하는거 맞나?

Thoughts
*The thoughts produced by the model are experimental
experiment














Expand to view model thoughts
4.8s
네, 맞습니다! 깃허브 액션을 이용해서 엘라스틱 빈스톡 CI/CD를 설정하시려면 지금 보고 계신 "Environments" 설정 페이지에서 환경 변수와 비밀 정보를 설정하는 것이 맞습니다.

이 페이지에서 하시는 작업은:

"Environment secrets" 섹션에는 민감한 정보인 AWS 액세스 키 (AWS_SECRET_ACCESS_KEY) 와 같은 정보를 안전하게 저장합니다. 이 정보는 GitHub Actions 워크플로우에서만 접근할 수 있습니다.

"Environment variables" 섹션에는 덜 민감한 정보인 AWS 액세스 키 ID (AWS_ACCESS_KEY_ID) 와 AWS 리전 (AWS_REGION) 과 같은 정보를 저장합니다. 이 정보 역시 GitHub Actions 워크플로우에서 사용할 수 있습니다.

다음 단계는 GitHub Actions 워크플로우를 작성하는 것입니다. 워크플로우 파일 (.github/workflows 폴더 안에 생성) 안에서 저장하신 환경 변수와 비밀 정보를 사용하여 AWS CLI 또는 다른 AWS 관련 액션을 통해 엘라스틱 빈스톡에 배포하는 단계를 정의하게 됩니다.

예를 들어, 워크플로우 파일에서 다음과 같이 환경 변수를 사용할 수 있습니다:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # "Environment secrets" 에 저장된 정보는 secrets 컨텍스트로 접근
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # "Environment secrets" 에 저장된 정보는 secrets 컨텍스트로 접근
          aws-region: ${{ vars.AWS_REGION }} # "Environment variables" 에 저장된 정보는 vars 컨텍스트로 접근

      - name: Deploy to Elastic Beanstalk
        # 엘라스틱 빈스톡 배포 액션 또는 AWS CLI 명령어를 여기에 추가
        run: |
          # ... 배포 명령어 ...
Use code with caution.
Yaml
요약하자면, 지금 보고 계신 "Environments" 설정 페이지는 깃허브 액션 워크플로우에서 사용할 AWS 자격 증명과 환경 변수를 관리하는 올바른 위치입니다. 다음으로 워크플로우 파일을 작성하여 실제 CI/CD 파이프라인을 구성하시면 됩니다.

8.2s
name: Deploy to Elastic Beanstalk

on:
push:
branches:
- main

jobs:
deploy:
runs-on: ubuntu-latest
steps:
- name: Checkout code
uses: actions/checkout@v2

- name: Setup AWS Credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ap-northeast-2

  - name: Zip project files
    run: |
      zip -r deploy.zip . -x "*.git*" "node_modules/*" "venv/*"

  - name: Deploy to Elastic Beanstalk
    uses: einaregilsson/beanstalk-deploy@v20
    with:
      aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      region: ${{ secrets.AWS_REGION }}
      application_name: "nooridal"  # EB 애플리케이션 이름으로 수정
      environment_name: "Nooridal-env-2"    # EB 환경 이름으로 수정
      version_label: ${{ github.sha }}
      deployment_package: deploy.zip
Use code with caution.
Thoughts
*The thoughts produced by the model are experimental
experiment


















































Expand to view model thoughts
11.7s
name: Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Zip project files
        run: |
          zip -r deploy.zip . -x "*.git*" "node_modules/*" "venv/*"

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ vars.AWS_REGION }} 
          application_name: "nooridal"  
          environment_name: "Nooridal-env-2"
          version_label: ${{ github.sha }}
          deployment_package: deploy.zip
